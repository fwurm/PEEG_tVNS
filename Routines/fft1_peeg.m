function fft1_peeg(S,inprefix,outprefix)

options.inprefix = inprefix;
options.outprefix = outprefix;
options.basewin = []; %baseline window
options.basetype = 'none'; %type of baseline
% options.basewin = [-1 0]; %baseline window
% options.basetype = 'relchange'; %type of baseline

%% step 1: convert to frequency domain
for i = 1:length(S)
    subfun(S(i),options);
end

%% step 2: make grandaverages (preliminary!)
warning('preliminary results!')

conditions = {'stim' 'sham'};
for iCond = 1:length(conditions)
    disp(['Condition: ' conditions{iCond}]);
    evalString = [];
    c = 1;
    
    for i = 1:length(S)
        disp(['   VP: ' num2str(S(i).index)]);
        fn = fullfile(S(i).TFAdir,options.outprefix,[S(i).code '-' conditions{iCond} '.mat']);
        f = load(fn);
        
        if isstruct(f.TFdata)                   
            freq{c} = f;
            evalString = [evalString 'freq{' num2str(c) '}.TFdata,'];
            c = c + 1;               
        else
            emptyVPs = [emptyVPs i];
        end   
    end
    evalString(end) = [];
    
    
    
    
    cfg.keepindividual = 'no'; % 'yes' or 'no' (default = 'no')   HIER WAR "yes" von Clara ???
    cfg.foilim         = 'all'; % [fmin fmax] or 'all', to specify a subset of frequencies (default = 'all')
    cfg.toilim         = 'all'; % [tmin tmax] or 'all', to specify a subset of latencies (default = 'all')
    cfg.channel        = 'all'; % Nx1 cell-array with selection of channels (default = 'all'), see FT_CHANNELSELECTION for details
    cfg.parameter      = 'powspctrm'; %string or cell-array of strings indicating which parameter(s) to average. default is set to 'powspctrm', if it is present in the data.
    
    %     [grandavg{iCond}] = ft_freqgrandaverage(cfg, freq{1}.dataTF, freq{2}.dataTF, freq{3}.dataTF, freq{4}.dataTF, freq{5}.dataTF, freq{6}.dataTF,...
    %         freq{7}.dataTF, freq{8}.dataTF, freq{9}.dataTF, freq{10}.dataTF, freq{11}.dataTF, freq{12}.dataTF,...
    %         freq{13}.dataTF, freq{14}.dataTF, freq{15}.dataTF, freq{16}.dataTF, freq{17}.dataTF, freq{18}.dataTF,...
    %         freq{19}.dataTF, freq{20}.dataTF, freq{21}.dataTF, freq{22}.dataTF, freq{23}.dataTF, freq{24}.dataTF);
    try
        eval(['[allgrandavg{iCond}] = ft_freqgrandaverage(cfg, ' evalString ');']); %careful with eval function!
    catch
        disp('!');
        
    end
    
    gnu = 1;
end

%% step 3: plotting

channel = {'Pz' 'P2' 'P1' 'P3' 'P4' 'PO3' 'PO4' 'POz'}';

cfg = [];
cfg.maskstyle    = 'saturation';
cfg.zlim         = [-0.5 0.5];
cfg.channel      = channel;
ft_singleplotTFR(cfg, allgrandavg{1});
ft_singleplotTFR(cfg, allgrandavg{2});

cfg = [];
cfg.maskstyle    = 'saturation';
cfg.zlim         = [-0.25 0.25];
cfg.channel      = channel;
TFRdiff = allgrandavg{1};
TFRdiff.powspctrm = allgrandavg{1}.powspctrm - allgrandavg{2}.powspctrm;
ft_singleplotTFR(cfg, TFRdiff);


figure(5)
for i = 1:4
    ax(i) = subplot(4,1,i);
end

% taking the figures generated by ft_singleplot and copy them into one
% figure (as in Sharon Fig 4GEH)
cond = {'tVNS' 'sham' 'tVNS-sham'};
for i = 1:3
    figure(i)
    h = get(gcf,'Children');
    newh = copyobj(h,5);
    posnewh = get(newh(3),'Position');
    possub  = get(ax(i+1),'Position');
    set(newh(3),'Position',...
        [posnewh(1) possub(2) posnewh(3) possub(4)])
    title(newh(3),sprintf('%s (%s)',cond{i},strjoin(cfg.channel)))
    if i == 3
        xlabel(newh(3),'Time [s]')
    end
    ylabel(newh(3),'Frequency [Hz]')
    delete(ax(i+1));
end

chanident = ismember(allgrandavg{1}.label, channel);
datstim = squeeze(mean(allgrandavg{1}.powspctrm(chanident(1:64),:,:),1));
datsham = squeeze(mean(allgrandavg{2}.powspctrm(chanident(1:64),:,:),1));

nfreqs = length(allgrandavg{1}.freq);
ntimes = length(allgrandavg{1}.time);
gaus_win = exp(-.5*(2.5*(-nfreqs/2:nfreqs/2-1)/(nfreqs/2)).^2); %approximate empirical alpha distribution from Sharon using gaussian
% gaus_win = ones(1,nfreqs);
datstim_mean = mean(repmat(gaus_win',[1 ntimes]).*datstim,1);
datsham_mean = mean(repmat(gaus_win',[1 ntimes]).*datsham,1);

datstim_mean(isnan(datstim_mean)) = 0;
datsham_mean(isnan(datsham_mean)) = 0;

plot(ax(1),allgrandavg{1}.time,datstim_mean,allgrandavg{1}.time,datsham_mean)
possub  = get(ax(1),'Position');
set(ax(1),'Position',...
        [posnewh(1) possub(2) posnewh(3) possub(4)])
title(ax(1),'Alpha power')
ylabel(ax(1),'average [%]')
legend(ax(1),cond(1:2))



function subfun(S,options)

fprintf('=> Subject: %d\n', S.index);

%% import EEG
inpath = [S.EEGdir options.inprefix ''];
data = pop_loadset('filename',[S.EEGfn '.set'],'filepath',inpath);

%resample to 128 Hz
srate = 128;
data = pop_resample(data,srate);

%split conditions
EEG_stim = pop_selectevent(data,'condition',1);
EEG_sham = pop_selectevent(data,'condition',0);

%convert to doubles (from singles)
EEG_stim.data = double(EEG_stim.data);
EEG_sham.data = double(EEG_sham.data);

%% convert to fieldtrip format
FFT_stim = eeglab2fieldtrip(EEG_stim,'preprocessing','none');
FFT_sham = eeglab2fieldtrip(EEG_sham,'preprocessing','none');

%% time-frequency the data

freqs = [5:(1/3):15]; %target frequencies
times = EEG_sham.times./1000; %target time window
winlength = 3; %taper window in seconds


%from fieltrip online
cfg              = [];
cfg.output       = 'pow';
cfg.channel      = 'EEG';
cfg.method       = 'mtmconvol';
cfg.taper        = 'hamming';
cfg.foi          = freqs;                   % analysis 5 to 15 Hz in steps of 0.33 Hz
cfg.t_ftimwin    = ones(length(cfg.foi),1).*winlength;  % length of time window = 3 sec
cfg.toi          = times;                   % time window "slides" from -0.5 to 1.5 sec in steps of 0.05 sec (50 ms)
cfg.keeptrials = 'yes';
TFR_stim = ft_freqanalysis(cfg, FFT_stim);
TFR_sham = ft_freqanalysis(cfg, FFT_sham);


%apply baseline
if ~isempty(options.basewin)
    fprintf('applying baseline correction...\n')
    cfg = [];
    cfg.baseline     = options.basewin;
    cfg.baselinetype = options.basetype;
    [TFR_stim] = ft_freqbaseline(cfg, TFR_stim);
    [TFR_sham] = ft_freqbaseline(cfg, TFR_sham);
else
    fprintf('no baseline correction...\n')
end



%save data
outpath = [S.TFAdir options.outprefix '\'];
if ~exist(outpath, 'dir')
    mkdir(outpath)
end

TFdata = TFR_stim;
save(fullfile(outpath,[S.code '-stim.mat']),'TFdata','-v7.3');
TFdata = TFR_sham;
save(fullfile(outpath,[S.code '-sham.mat']),'TFdata','-v7.3');

%plot all electrodes
% cfg = [];
% cfg.showlabels   = 'yes';
% cfg.zlim         = [-1 2];

%pre baseline
% ft_multiplotTFR(cfg, TFR_stim);
% ft_multiplotTFR(cfg, TFR_sham);

%post baseline
% ft_multiplotTFR(cfg, bTFR_stim);
% ft_multiplotTFR(cfg, bTFR_sham);

%plot single electrode
% channel = 'Pz';
% cfg = [];
% cfg.maskstyle    = 'saturation';
% cfg.zlim         = [-1 1];
% cfg.channel      = channel;
% ft_singleplotTFR(cfg, bTFR_stim);
% ft_singleplotTFR(cfg, bTFR_sham);
% 
% cfg = [];
% cfg.maskstyle    = 'saturation';
% cfg.zlim         = [-0.5 0.5];
% cfg.channel      = channel;
% TFRdiff = bTFR_stim;
% TFRdiff.powspctrm = bTFR_stim.powspctrm - bTFR_sham.powspctrm;
% ft_singleplotTFR(cfg, TFRdiff);

gnu = 1;

